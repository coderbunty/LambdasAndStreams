Streams are an abstraction, its not a physical object with data like array/list/set/map etc.
Stream is a bunch of functions we would evaluate eventually, but there is no data sitting in streams.

A stream is a sequence of objects that supports various methods which can be pipelined to produce the
desired result.

java.util.stream - key abstraction introduced in this package is stream.
The classes Stream, IntStream, LongStream, and DoubleStream are streams over objects and the primitive
int, long and double types. Streams differ from collections in several ways:

* No storage. A stream is not a data structure that stores elements; instead, it conveys elements
  from a source such as a data structure, an array, a generator function, or an I/O channel, through
  a pipeline of computational operations.
* Functional in nature. An operation on a stream produces a result, but does not modify its source.
  For example, filtering a Stream obtained from a collection produces a new Stream without the filtered
  elements, rather than removing elements from the source collection.
* Laziness-seeking. Many stream operations, such as filtering, mapping, or duplicate removal, can be
  implemented lazily, exposing opportunities for optimization. For example, "find the first String with
  three consecutive vowels" need not examine all the input strings. Stream operations are divided into
  intermediate (Stream-producing) operations and terminal (value- or side-effect-producing) operations.
  Intermediate operations are always lazy. i.e., for 1 element all the intermediate & terminal operations
  are performed then the next element is taken. This increases performance.
  (All the intermediate operations are only performed when terminal operation is triggered.)
* Possibly unbounded. While collections have a finite size, streams need not. Short-circuiting operations
  such as limit(n) or findFirst() can allow computations on infinite streams to complete in finite time.
* Consumable. The elements of a stream are only visited once during the life of a stream. Like an
  Iterator, a new stream must be generated to revisit the same elements of the source.


Streams can be obtained in a number of ways. Some examples include:

* From a Collection via the stream() and parallelStream() methods;
* From an array via Arrays.stream(Object[]);
* From static factory methods on the stream classes, such as
  Stream.of(Object[]), IntStream.range(int, int) or Stream.iterate(Object, UnaryOperator);
* The lines of a file can be obtained from BufferedReader.lines();
* Streams of file paths can be obtained from methods in Files;
* Streams of random numbers can be obtained from Random.ints();
* Numerous other stream-bearing methods in the JDK, including
  BitSet.stream(), Pattern.splitAsStream(java.lang.CharSequence), and JarFile.stream().


Stream operations & pipelines:

Stream operations are divided into intermediate and terminal operations, and are combined to form stream
pipelines. A stream pipeline consists of a source (such as a Collection, an array, a generator function,
or an I/O channel); followed by zero or more intermediate operations such as Stream.filter or Stream.map;
and a terminal operation such as Stream.forEach or Stream.reduce.

Intermediate operations return a new stream. They are always lazy; executing an intermediate operation
such as filter() does not actually perform any filtering, but instead creates a new stream that, when
traversed, contains the elements of the initial stream that match the given predicate. Traversal of the
pipeline source does not begin until the terminal operation of the pipeline is executed.



